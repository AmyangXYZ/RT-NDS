syntax = "proto3";

package rtdex;

option go_package = "pkg/packet";

// Enum for packet types
enum PacketType {
  UNKNOWN_PACKET_TYPE = 0;
  // High Priority: Time-aware queue, ACK required
  JOIN_REQUEST = 1;
  JOIN_RESPONSE = 2;
  ERROR_MESSAGE = 3;
  DATA_REGISTER = 4;
  DATA_INTEREST = 5;
  DATA_INTEREST_RESPONSE = 6;
  DATA_CONTENT = 7;
  ACKNOWLEDGEMENT = 8;

  // Medium Priority: ACK required  
  STATISTICS = 9;
  CONFIGURATION = 10;

  // Low Priority: Best-effort delivery
  HEARTBEAT = 11;
}

// Enum for priority levels
enum Priority {
  UNKNOWN_PRIORITY = 0;
  LOW = 1;
  MEDIUM = 2;
  HIGH = 3;
}

// Enum for error codes
enum ErrorCode {
  UNKNOWN_ERROR = 0;
  AUTHENTICATION_FAILED = 1;
  DATA_REGISTER_FAILED = 2;
  DATA_NOT_FOUND = 3;
  DATA_NOT_READY = 4;
  DATA_CHECK_SUM_FAILED = 5;
}

// Common header for all packets
message PacketHeader {
  uint32 protocol_version = 1;
  uint32 packet_uid = 2;
  PacketType packet_type = 3;
  uint32 sequence_number = 4;
  uint32 source_id = 5;
  uint32 destination_id = 6;
  Priority priority = 7;
  uint64 timestamp = 8;
  uint32 payload_length = 9;
}

// Join Request
message JoinRequest {
  uint32 id = 1;
  string namespace = 2;
  uint32 authentication_token = 3;
}

// Join Response
message JoinResponse {
  uint32 session_token = 2;
}

// Data Register
message DataRegister {
  string name = 1;
  uint64 freshness = 2; // in seconds
  uint64 size = 3;
  uint32 checksum = 4; // merkle tree, checksum of each chunk's checksum
  uint32 num_chunks = 5;
}

// Data Interest
message DataInterest {
  string name = 1;
}

// Data Interest Response
message DataInterestResponse {
  string name = 1;
  uint32 checksum = 2;
  uint32 num_chunks = 3;
}

// Data Content
message DataContent {
  string name = 1;
  uint32 chunk_index = 2;
  uint32 checksum = 3; // CRC32
  bytes data = 4;
}

// Acknowledgement
message Acknowledgement {
  int64 latency = 1;
}

// Error Message
message ErrorMessage {
  ErrorCode error_code = 1;
}

// Statistics
message Statistics {
  uint32 station_id = 1;
  uint32 status_code = 2;
}

// Configuration
message Configuration {
  uint32 station_id = 1;
  bytes config_data = 2;
}

// Heartbeat
message Heartbeat {
  uint64 timestamp = 2;
}

// Main packet message that encapsulates all types
message RTDEXPacket {
  PacketHeader header = 1;
  oneof payload {
    JoinRequest join_request = 2;
    JoinResponse join_response = 3;
    DataRegister data_register = 4;
    DataInterest data_interest = 5;
    DataInterestResponse data_interest_response = 6;
    DataContent data_content = 7;
    Acknowledgement acknowledgement = 8;
    ErrorMessage error_message = 9;
    Statistics statistics = 10;
    Configuration configuration = 11;
    Heartbeat heartbeat = 12;
  }
}